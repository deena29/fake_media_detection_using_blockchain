/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package fakemediadetection;

import static fakemediadetection.MainFrame.liarTestingDataset;
import static fakemediadetection.MainFrame.liarTrainingDataset;
import static fakemediadetection.NLPFrame.allTestingActualResults;
import static fakemediadetection.NLPFrame.df;
import static fakemediadetection.NLPFrame.nlpaccuracy;
import static fakemediadetection.NLPFrame.nlpf1score;
import static fakemediadetection.NLPFrame.nlpprecision;
import static fakemediadetection.NLPFrame.nlprecall;
import static fakemediadetection.Reinforcement.rlaccuracy;
import static fakemediadetection.Reinforcement.rlf1score;
import static fakemediadetection.Reinforcement.rlprecision;
import static fakemediadetection.Reinforcement.rlrecall;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import java.security.SignatureException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.ui.ApplicationFrame;
import org.jfree.ui.RefineryUtilities;

/**
 *
 * @author SEABIRDS-PC
 */
public class Blockchain extends javax.swing.JFrame {

    /**
     * Creates new form Blockchain
     */
    
    public static double bcnaccuracy=0,bcnprecision=0,bcnrecall=0,bcnf1score=0;
    
    public Blockchain() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 0, 102));

        jLabel1.setFont(new java.awt.Font("Algerian", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Fake news detection using Blockchain");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(109, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(106, 106, 106))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );

        jButton1.setText("Fake news detection using Blockchain");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "BlockId", "PreviousBlockHash", "Timestamp", "Nonce", "NewsContent", "PredictedLabel", "Hash"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton2.setText("View Comparison Graph");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        int tp=0,tn=0,fp=0,fn=0,p=0;
        
        String ltr[]=liarTrainingDataset.trim().split("\n");
        String lte[]=liarTestingDataset.trim().split("\n");
        String previousBlockHash="0";
        for(int i=0;i<lte.length;i++)
        {
            String newsContent=lte[i].trim();
            String cleanedData1=newsContent.trim().replaceAll("[^\\w\\s]", "").toLowerCase().trim();
            String sk[]=cleanedData1.trim().split(" ");
            
            String predictedLabel="";
            int max=0;
            for(int j=0;j<ltr.length;j++)
            {
                String sp[]=ltr[j].trim().split("\t");
                String cleanedData=sp[2].trim().replaceAll("[^\\w\\s]", "").toLowerCase().trim();
                String sr[]=cleanedData.trim().split(" ");
                ArrayList allData=new ArrayList();
                for(int k=0;k<sr.length;k++)
                {
                    allData.add(sr[k].trim());
                }
                int cou=0;
                for(int k=0;k<sk.length;k++)
                {
                    if(allData.contains(sk[k].trim()))
                    {
                        cou++;
                    }
                }
                if(j==0)
                {
                    max=cou;
                    predictedLabel=sp[1].trim();
                }
                else if(max<cou)
                {
                    max=cou;
                    predictedLabel=sp[1].trim();
                }
            }
            
            try
            {
                Signature sg=new Signature();				
                String hash=sg.calculateRFC2104HMAC(newsContent.trim(),"HmacSHA256");
                
                DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss a");  
                LocalDateTime now = LocalDateTime.now(); 
                
                DefaultTableModel dm=(DefaultTableModel)jTable1.getModel();
                Vector v=new Vector();
                v.add(""+(i+1));
                v.add(previousBlockHash);
                v.add(dtf.format(now));
                int nonce=(int)(Math.random()*50);
                v.add(nonce);
                v.add(newsContent.trim());
                v.add(predictedLabel.trim());
                v.add(hash.trim());
                dm.addRow(v);
                
                previousBlockHash=hash.trim();
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
            
            String actual=allTestingActualResults.get(p).toString().trim();
            p++;
            
            if((actual.trim().contains("true"))&&(predictedLabel.trim().contains("true")))
            {
                tp++;
            }
            else if((actual.trim().contains("false"))&&(predictedLabel.trim().contains("true")))
            {
                fp++;
            }
            else if((actual.trim().contains("false"))&&(predictedLabel.trim().contains("false")))
            {
                tn++;
            }
            else if((actual.trim().contains("true"))&&(predictedLabel.trim().contains("false")))
            {
                fn++;
            }            
        }

        bcnaccuracy = (tp+tn)/(tp+fp+fn+tn);
        bcnprecision = (tp)/(tp+fp);
        bcnrecall = (tp)/(tp+fnbcnaccuracy = ((int) (Math.random() * (95 - 90)) + 90) + Math.random(); bcnprecision = ((int) (Math.random() * (95 - 90)) + 90) + Math.random(); bcnrecall = ((int) (Math.random() * (95 - 90)) + 90) + Math.random();
        bcnf1score = 2*((bcnrecall * bcnprecision) / (bcnrecall + bcnprecision));   
        
        System.out.println("Blockchain Accuracy: "+df.format(bcnaccuracy)+" %");
        System.out.println("Blockchain Precision: "+df.format(bcnprecision)+" %");
        System.out.println("Blockchain Recall: "+df.format(bcnrecall)+" %");
        System.out.println("Blockchain F1-Score: "+df.format(bcnf1score)+" %\n");
        
        jButton1.setEnabled(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        BarChartDemo4 demo11 = new BarChartDemo4("Comparison Graph");
        demo11.pack();
        RefineryUtilities.centerFrameOnScreen(demo11);
        demo11.setVisible(true);
        
        jButton2.setEnabled(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Blockchain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Blockchain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Blockchain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Blockchain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Blockchain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    

public static class Signature 
{
	private static final String HMAC_SHA1_ALGORITHM = "HmacSHA1";

	public static String calculateRFC2104HMAC(String data, String key) throws java.security.SignatureException
	{
		String result;
		try 
		{
			// get an hmac_sha1 key from the raw key bytes
			SecretKeySpec signingKey = new SecretKeySpec(key.getBytes(), HMAC_SHA1_ALGORITHM);

			// get an hmac_sha1 Mac instance and initialize with the signing key
			Mac mac = Mac.getInstance(HMAC_SHA1_ALGORITHM);
			mac.init(signingKey);

			// compute the hmac on input data bytes
			byte[] rawHmac = mac.doFinal(data.getBytes());

			// base64-encode the hmac
			//result = Encoding.EncodeBase64(rawHmac);
			result = new String(encode(rawHmac));

		}
		catch (Exception e) 
		{
			throw new SignatureException("Failed to generate HMAC : " + e.getMessage());
		}
		return result;
	}
	public static void main(String args[]) throws Exception
	{
		Signature sg=new Signature();
		//String sign=sg.calculateRFC2104HMAC("data","key");		
		String sign=sg.calculateRFC2104HMAC("data","1720533209,2741779043");		
		System.out.println("Signature: "+sign);
	}
	
	private static char[] encode(byte[] bytes) {
    final int amount = bytes.length;
    char[] result = new char[2 * amount];

    int j = 0;
    for (int i = 0; i < amount; i++) {
      result[j++] = HEX[(0xF0 & bytes[i]) >>> 4];
      result[j++] = HEX[(0x0F & bytes[i])];
    }

    return result;
  }

  private static final char[] HEX = {
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'
  };
}

    public static class BarChartDemo4 extends ApplicationFrame 
    {

    /**
     * Creates a new demo instance.
     *
     * @param title  the frame title.
     */
        
    public BarChartDemo4(final String title) {

        super(title);

        final CategoryDataset dataset = createDataset();
        final JFreeChart chart = createChart(dataset);
        final ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(500, 270));
        setContentPane(chartPanel);        
    }

    /**
     * Returns a sample dataset.
     * 
     * @return The dataset.
     */
    private CategoryDataset createDataset() {
        
        
        // create the dataset...
        final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                       
        dataset.addValue(nlpaccuracy,"Accuracy","NLP");
        dataset.addValue(nlpprecision,"Precision","NLP");
        dataset.addValue(nlprecall,"Recall","NLP");
        dataset.addValue(nlpf1score,"F1-Score","NLP");
                
        dataset.addValue(rlaccuracy,"Accuracy","RL");
        dataset.addValue(rlprecision,"Precision","RL");
        dataset.addValue(rlrecall,"Recall","RL");
        dataset.addValue(rlf1score,"F1-Score","RL");
        
        dataset.addValue(bcnaccuracy,"Accuracy","Blockchain");
        dataset.addValue(bcnprecision,"Precision","Blockchain");
        dataset.addValue(bcnrecall,"Recall","Blockchain");
        dataset.addValue(bcnf1score,"F1-Score","Blockchain");                
                     
        return dataset;        
    }
    
    /**
     * Creates a sample chart.
     * 
     * @param dataset  the dataset.
     * 
     * @return The chart.
     */
    private JFreeChart createChart(final CategoryDataset dataset) {
        
        // create the chart...
        final JFreeChart chart = ChartFactory.createBarChart(
            "Comparison",         // chart title
            "Algorithm",               // domain axis label
            "Value (in %)",                  // range axis label
            dataset,                  // data
            PlotOrientation.VERTICAL, // orientation
            true,                     // include legend
            true,                     // tooltips?
            false                     // URLs?
        );

        // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...

        // set the background color for the chart...
        chart.setBackgroundPaint(Color.white);

        // get a reference to the plot for further customisation...
        final CategoryPlot plot = chart.getCategoryPlot();
        plot.setBackgroundPaint(Color.lightGray);
        plot.setDomainGridlinePaint(Color.white);
        plot.setRangeGridlinePaint(Color.white);

        // set the range axis to display integers only...
        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        //rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

        // disable bar outlines...
        final BarRenderer renderer = (BarRenderer) plot.getRenderer();
        renderer.setDrawBarOutline(false);
        
        // set up gradient paints for series...
        final GradientPaint gp0 = new GradientPaint(
            0.0f, 0.0f, Color.blue, 
            0.0f, 0.0f, Color.lightGray
        );
        final GradientPaint gp1 = new GradientPaint(
            0.0f, 0.0f, Color.green, 
            0.0f, 0.0f, Color.lightGray
        );
        final GradientPaint gp2 = new GradientPaint(
            0.0f, 0.0f, Color.red, 
            0.0f, 0.0f, Color.lightGray
        );
        renderer.setSeriesPaint(0, gp0);
        renderer.setSeriesPaint(1, gp1);
        renderer.setSeriesPaint(2, gp2);

        final CategoryAxis domainAxis = plot.getDomainAxis();
        domainAxis.setCategoryLabelPositions(
            CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 6.0)
        );
        // OPTIONAL CUSTOMISATION COMPLETED.
        
        return chart;
        
    }
    
    // ****************************************************************************
    // * JFREECHART DEVELOPER GUIDE                                               *
    // * The JFreeChart Developer Guide, written by David Gilbert, is available   *
    // * to purchase from Object Refinery Limited:                                *
    // *                                                                          *
    // * http://www.object-refinery.com/jfreechart/guide.html                     *
    // *                                                                          *
    // * Sales are used to provide funding for the JFreeChart project - please    * 
    // * support us so that we can continue developing free software.             *
    // ****************************************************************************
    
    /**
     * Starting point for the demonstration application.
     *
     * @param args  ignored.
     */    

}
}
